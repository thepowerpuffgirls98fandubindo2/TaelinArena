import Base#kqQ2
import TaelinArena.Geometry
import TaelinArena.ModelIds

PlayerId : Type
  Number

ModelId : Type
  Number

ActionId : Type
  Number

SideId : Type
  Number

T Hitbox
| nbox
| cbox(rad: Number)
| pbox(pts: List(V3))

T Effect
| heal(lif: Number)
| damage(dmg: Number)
| repulse(mag: Number)
| impulse(mag: Number, dir: V3)
| slow(dur: Number, val: Number)
| haste(dur: Number, val: Number)
| shield(dur: Number, val: Number)
| silence(dur: Number)
| root(dur: Number)
| stun(dur: Number)

T Buff
| shielded(dur: Number, val: Number) // shields are hit before hp
| slowed(dur: Number, val: Number) // slow down
| hasted(dur: Number, val: Number) // speed up
| silenced(dur: Number) 
| rooted(dur: Number)
| stuned(dur: Number)

T Hit
| hit(eff: List(Effect), pos: V3, dir: V3, box: Hitbox)

TxFunction : Type
  Thing -> Thing

T Light
| light(pos: V3, rad: Number, rng: Number, sub: V3, add: V3)

T Thing
| thing(
  fun : TxFunction,  // transaction function
  pid : PlayerId,    // number of player controlling this
  mid : ModelId,     // id of model to be rendered
  act : ActionId,    // number of performing action
  sid : SideId,      // player side
  stt : Map(Number), // an arbitrary state
  nam : String,      // name of thing
  lit : List(Light), // list of lights to render
  tik : Number,      // ticks passed since last act change
  pos : V3,          // in-game position
  mov : Number,      // movement speed
  bst : Number,      // movement speed multiplier
  pad : V3,          // analog pad direction (len = 0 to 1)
  dir : V3,          // facing direction (len = 1)
  trg : V3,          // targeted position
  vel : V3,          // dash velocity vector
  box : Hitbox,      // hitbox (space occupied)
  wei : Number,      // weight (affects friction)
  mhp : Number,      // max health points
  dmg : Number,      // damage taken
  knk : V3,          // launch direction and intensity
  buf : List(Buff),  // buffs and nerfs (status effects) applied
  chi : List(Thing), // child thing to create on next tick
  hit : List(Hit),   // hits done by this
  rst : Bool,        // should this reset to idle
  die : Bool)        // should this be removed?

T Game
| game(stage : List(Thing))

T Input
| sdir(dir: V3) // stick direction
| key0(pos: V3) // left down
| key1(pos: V3) // middle down
| key2(pos: V3) // right down
| key3(pos: V3) // space down
| key4(pos: V3) // extra down
| key5(pos: V3) // shift down
| cmsg(txt: String) // chat message

T Command
| command(pid: PlayerId, inp: Input)

// 1 second has 24 tiks
ONE_SEC : Number
  24

// Creates a new default thing
new_thing : Thing
  thing(
    ((x) => x), // fun
    0xFFFFFFFF, // pid
    0xFFFFFFFF, // mid
    0,          // act
    0,          // sid
    empty(_),   // stt
    nil(_),     // nam
    nil(_),     // lit
    0,          // tik
    v3(0,0,0),  // pos
    8,          // mov
    1,          // bst
    v3(0,0,0),  // pad
    v3(0,-1,0), // dir
    v3(0,0,0),  // trg
    v3(0,0,0),  // vel
    cbox(12),   // box
    1,          // wei
    24,         // mhp
    0,          // dmg
    v3(0,0,0),  // knk
    nil(_),     // buf
    nil(_),     // chi
    nil(_),     // hit
    false,      // rst
    false)      // die

// Gets a thing from game by its id
get_thing_by_pid(pid: PlayerId, gm: Game) : Maybe(Thing)
  case gm | game
  let cond = (t) =>
    case t |thing
    number_equal(t.pid, pid)
  find(Thing; cond, gm.stage)

// Gets the position of an object by its id
get_position_by_pid(pid: PlayerId, gs: Game) : V3
  case get_thing_by_pid(pid, gs) as found
  | none => v3(0,0,0)
  | some => case found.value |thing found.value.pos

// Modifies every thing in the game
map_stage(fn: Thing -> Thing, gm: Game) : Game
  gm <= game(stage = map(__ fn, stage))

// Modifies the object with given id
with_thing(pid:PlayerId, fn: Thing -> Thing, gm:Game) : Game
  let effect = (thi) =>
    case thi |thing
    case number_equal(thi.pid, pid) as e
    with thi : Thing
    | true  => fn(thi)
    | false => thi
  map_stage(effect, gm)

// Thing field setters
set_thing_fun(thi:Thing, new_fun) thi<=thing(fun=new_fun)
set_thing_pid(thi:Thing, new_pid) thi<=thing(pid=new_pid)
set_thing_mid(thi:Thing, new_mid) thi<=thing(mid=new_mid)
set_thing_stt(thi:Thing, new_stt) thi<=thing(stt=new_stt)
set_thing_act(thi:Thing, new_act) thi<=thing(act=new_act)
set_thing_sid(thi:Thing, new_sid) thi<=thing(sid=new_sid)
set_thing_nam(thi:Thing, new_nam) thi<=thing(nam=new_nam)
set_thing_lit(thi:Thing, new_lit) thi<=thing(lit=new_lit)
set_thing_tik(thi:Thing, new_tik) thi<=thing(tik=new_tik)
set_thing_pos(thi:Thing, new_pos) thi<=thing(pos=new_pos)
set_thing_mov(thi:Thing, new_mov) thi<=thing(mov=new_mov)
set_thing_bst(thi:Thing, new_bst) thi<=thing(bst=new_bst)
set_thing_pad(thi:Thing, new_pad) thi<=thing(pad=new_pad)
set_thing_dir(thi:Thing, new_dir) thi<=thing(dir=new_dir)
set_thing_trg(thi:Thing, new_trg) thi<=thing(trg=new_trg)
set_thing_vel(thi:Thing, new_vel) thi<=thing(vel=new_vel)
set_thing_box(thi:Thing, new_box) thi<=thing(box=new_box)
set_thing_dmg(thi:Thing, new_dmg) thi<=thing(dmg=new_dmg)
set_thing_knk(thi:Thing, new_knk) thi<=thing(knk=new_knk)
set_thing_buf(thi:Thing, new_buf) thi<=thing(buf=new_buf)
set_thing_chi(thi:Thing, new_chi) thi<=thing(chi=new_chi)
set_thing_hit(thi:Thing, new_hit) thi<=thing(hit=new_hit)
set_thing_rst(thi:Thing, new_rst) thi<=thing(rst=new_rst)
set_thing_die(thi:Thing, new_die) thi<=thing(die=new_die)

// Resets to given tick
reset(
  self   : Thing,
  at_tik : Number)
  case self |thing
  if self.tik > (at_tik - 1) then
    self <= thing(rst = true)
  else
    self

// Dies at given tick
die(
  self   : Thing,
  at_tik : Number)
    case self |thing
    if self.tik > (at_tik - 1) then
      self <= thing(die = true)
    else
      self

// Performs an animation, reseting to idle when it ends
// - self: thing to be animated
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model: id of the first model of the animation
// - count: total count of models on the animation
// - from: frame to start animating
// - til: last frame to animate
animate_between(
  self  : Thing,
  boost : Number,
  model : Number,
  count : Number,
  from  : Number,
  til   : Number
  ) : Thing
  case self |thing
  if is_between(from, til, self.tik) then
    self <= thing(
      bst = boost,
      dir =
        let pad_len = len_v3(pad)
        if (act > 0) && (pad_len === 0) then
          targ_dir(self)
        else if pad_len > 0 then
          norm_v3(pad)
        else
          dir,
      mid =
        let duration = til - from
        let curr_tik = tik - from
        let curr_tim = curr_tik \ duration
        model + (floor(curr_tim * count) % count))
  else
    self

// Performs an animation, reseting to idle when it ends
// - self: thing to be animated
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model: id of the first model of the animation
// - count: total count of models on the animation
// - durat: duration of the animation
animate(
  self  : Thing,
  boost : Number,
  model : Number,
  count : Number,
  durat : Number
  ) : Thing
  let self = animate_between(self,boost,model,count,0,durat)
  let self = reset(self, durat - 1)
  self

// Performs an animation, dying when it ends
// - self: thing to be animated
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model: id of the first model of the animation
// - count: total count of models on the animation
// - durat: duration of the animation
animate_die(
  self  : Thing,
  boost : Number,
  model : Number,
  count : Number,
  durat : Number
  ) : Thing
  let self = animate_between(self,boost,model,count,0,durat)
  let self = die(self, durat - 1)
  self

// Avoid problems with "ghost frame after blink"
// - self: thing to be animated
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model_atk: id of the main model of the animation
// - model_idle: idle000 of the character
// - count: total count of models on the animation
// - from: frame to start animating
// - til: last frame to animate
animate_with_blink(
  self       : Thing,
  boost      : Number,
  model_atk  : Number,
  model_idle : Number,
  count      : Number,
  from       : Number,
  til        : Number
  ) : Thing
  case self | thing
    let self = animate_between(self, boost, model_atk, count, from, til)
    let self = animate_between(self, boost, model_idle, 1, til, til + 1)
    let self = reset(self, til)
    self

// Performs a dash between certain frames
// - self: thing that will dash
// - speed: dash speed in voxels/frame
// - from_tik: number of the tik it will start the dash
// - til_tik: number of the tik it will stop the dash
 dash(
  self     : Thing,
  speed    : Number,
  from_tik : Number,
  til_tik  : Number)
  case self |thing 
  let  rooted = is_rooted(self)
  case rooted 
  | true =>  self  
  | false => self <= thing(vel =
      if is_between(from_tik, til_tik, tik) then 
        scale_v3(speed, lookat_v3(pos, trg, dir))
      else
        v3(0,0,0))

// Sets the position
move(self: Thing, to_pos: V3)
  self <= thing(pos = to_pos)

// Blinks (teleports) to another position
// - self: thing that will blink
// - at_tik: number of the tik on which the blink happens
// - to_pos: position where the thing will blink to
blink(
  self   : Thing,
  at_tik : Number,
  to_pos : V3)
  case self |thing 
  let rooted = is_rooted(self)
  case rooted 
  | true => self 
  | false => self <= thing(
    pos = if tik === at_tik then to_pos else pos)

// Creates a hit box that damages and knockbacks
// - self: thing that owns the hitbox
// - hitx: Hit object with damage and knockback info
cast(
  self   : Thing,
  at_tik : Number,
  do_hit : List(Hit))
  case self |thing
  if self.tik === at_tik then
    self <= thing(hit = do_hit)
  else
    self

// Spawns another thing
// - self: thing that will create another thing
// - at_tik: number of the tik when thing will be created
// - at_pos: position on which thing will be created
// - thing: thing that will be created
spawn(
  self   : Thing,
  at_tik : Number,
  childs : List(Thing))
  //let thing = thing <= thing(pid = -1, pos = at_pos)
  self <= thing(chi =
    if tik === at_tik then
      childs
    else
      chi)

// Creates lights at given tick
illumine(
  self     : Thing,
  from_tik : Number,
  to_tik   : Number,
  lights   : List(Light))
  self <= thing(lit =
    if is_between(from_tik, to_tik, tik)
      then lights
      else nil(_))

// Returns the direction the thing is looking to
targ_dir(self: Thing)
  case self |thing
  lookat_v3(self.pos, self.trg, self.dir)

// Returns the position at a given distance towards targ_dir
at_dist(self: Thing, dist: Number)
  case self |thing
  let dir = targ_dir(self)
  let pos = add_v3(self.pos, scale_v3(dist, dir))
  pos

// Return the position within a maximum range towards targ_dir
at_max_dist(self: Thing, max_range: Number)
  case self |thing
  let dist_max = dist_v3(self.pos, at_dist(self, max_range))
  let dist_trg = dist_v3(self.pos, self.trg)
  if dist_trg < dist_max
    then at_dist(self, dist_trg)
    else at_dist(self, max_range)

// Return the position within a mininum range towards targ_dir
at_min_dist(self: Thing, min_range: Number)
  case self |thing
  let dist_min = dist_v3(self.pos, at_dist(self, min_range))
  let dist_trg = dist_v3(self.pos, self.trg)
  if dist_trg > dist_min
    then at_dist(self, dist_trg)
    else at_dist(self, min_range)

// Return the position within a mininum and maximun range towards look_dir
between_dist(self: Thing, min_range: Number, max_range: Number)
  case self |thing
  let dist_trg = dist_v3(self.pos, self.trg)
  at_dist(self, max(min_range, min(max_range, dist_trg)))

// Sets a thing's act
init_act(this: Thing, new_act: Number, new_trg: V3) : Thing
  this <= thing(
    act = if act === 0 then new_act else act,
    trg = if act === 0 then new_trg else trg,
    tik = if act === 0 then 0 else tik)

// Is this thing walking?
is_walking(this: Thing) : Number
  case this |thing
  len_v3(this.pad) > 0 

// Spawns another thing
// - self: thing that will create another thing
// - at_tik: number of the tik when thing will be created
// - at_pos: position on which thing will be created
// - thing: thing that will be created
create_at(
  self   : Thing,
  at_tik : Number
  new_thing: TxFunction)
  case self |thing
  if self.tik === at_tik then
    self <= thing(fun=new_thing, pid=self.pid, pos=self.pos)
  else 
    self

// Ends an animation/transformation/thing after some ticks
// - self: thing that will end after a while
// - tx: the new animation to use when it ends
// - after_tiks: numbers of ticks passed until the end
// - stt_key: the key in the stt map
end_thing(
  self: Thing, 
  tx: TxFunction, 
  after_tiks: Number, 
  stt_key: Bits
  ) : Thing
  case self |thing
    let current_tik = lookup(_ stt_key, self.stt)
    let empty_stt = insert(_ stt_key, after_tiks, self.stt)
    case current_tik
    | none => self <= thing(stt = empty_stt) // insert a new key
    | some =>
      if current_tik.value === 0 
      then
        self <= thing(fun=tx, pid=self.pid, pos=self.pos, stt=empty_stt)
      else 
        let new_stt = insert(_ stt_key, if current_tik.value > 0 then current_tik.value - 1 else 0, self.stt)
        self <= thing(stt = new_stt)


// Blocks a thing during an animation
// - self : the thing to apply block on
// - boost: speed multiplier (0 = no move, 1 = normal spd)
// - model: id of the first model of the animation
// - count: total count of models on the animation
// - durat: duration of the animation
block(
  self: Thing, 
  boost: Number,
  model: Number,
  count: Number,
  from: Number,
  til: Number
) : Thing 
  case self |thing 
  if is_between(from, til, self.tik) 
  then self <= thing(
    dmg = 0,
    bst = boost,
    mid = 
      let duration = til - from
      let curr_tik = tik - from
      let curr_tim = curr_tik \ duration
      model + (floor(curr_tim * count) % count)
    )
  else 
    reset(self, til + 1) 

// Update a stt_key until the value associated to it ends. Used along with will_set_buff
// - self: thing with stt (usually character)
// - stt_key: the key in the stt map
update_buff(self: Thing, stt_key: Bits) : Thing
  case self |thing
    let current_tik = lookup(_ stt_key, self.stt)
    case current_tik
    | none => self
    | some => 
      if current_tik.value === 0
      then self <= thing(stt=insert(_ stt_key, 0, self.stt))
      else 
        let new_stt = insert(_ stt_key, if current_tik.value > 0 then current_tik.value - 1 else 0, self.stt)
        self <= thing(stt = new_stt)

// Set a new key
// - self: thing 
// - stt_key: the key in the stt map
// - func: a function with the value to be setted
map_stt_key(self: Thing, stt_key: Bits, func: Number -> Number) : Thing
  self <= thing(stt = 
    case lookup(_ stt_key, stt) as result
    | none => insert(_ stt_key, 0, stt)
    | some => insert(_ stt_key, func(result.value), stt))

//  Get a value associated with a key
// - self: thing 
// - stt_key: the key in the stt map
get_stt_value(self: Thing, stt_key: Bits) : Number 
  case self |thing 
    let result = lookup(_ stt_key, self.stt)
    case result 
    | none => 0
    | some => result.value

// Check if a buff is being used
// - self: thing with stt (usually character)
// - stt_key: the key in the stt map
is_using_buff(self: Thing, stt_key: Bits) : Bool
  case self |thing
    let res = lookup(_ stt_key, self.stt)
    case res
    | none => false
    | some => if res.value === 0 then false else true


combine_mov_buffs(buff: Buff, i: Number) : Number
  case buff 
  | shielded => i 
  | slowed   => i * buff.val
  | hasted   => i * buff.val
  | silenced => i 
  | rooted   => 0 
  | stuned   => 0

// Returns the current speed multiplier by checking all buffs, considering
// sloweds and hasteds
speed_multiplier_of(self: Thing) : Number
  case self |thing 
  fold(Buff; Number; self.bst, combine_mov_buffs, self.buf)

is_silenced(self: Thing) : Bool 
  case self |thing 
  let is_silenced_buff = (buff: Buff) => 
    case buff 
    | shielded => false  
    | slowed   => false  
    | hasted   => false 
    | silenced => true  
    | rooted   => false 
    | stuned   => true  
  case find(Buff; is_silenced_buff, self.buf) as res 
  | none => false 
  | some => true 
  

is_stunned(self: Thing) : Bool 
  case self |thing 
  let is_stunned_buff = (buff: Buff) => 
    case buff 
    | shielded => false  
    | slowed   => false  
    | hasted   => false 
    | silenced => false  
    | rooted   => false 
    | stuned   => true  
  case find(Buff; is_stunned_buff, self.buf) as res 
  | none => false 
  | some => true


is_rooted(self: Thing) : Bool 
  case self |thing 
  let is_rooted_buff = (buff: Buff) => 
    case buff 
    | shielded => false  
    | slowed   => false  
    | hasted   => false 
    | silenced => false  
    | rooted   => true 
    | stuned   => true  
  case find(Buff; is_rooted_buff, self.buf) as res 
  | none => false 
  | some => true



T Ordering 
| LT 
| EQ 
| GT 

compare_numbers(a: Number, b: Number) : Ordering
  if a === b then 
    EQ 
  else if a > b then 
    GT 
  else 
    LT 

use_shields(buff: Buff, acc: Pair(Number, List(Buff))) : Pair(Number, List(Buff))
  case acc |pair 
  case buff
  | shielded => 
    if acc.fst === 0 then 
      acc 
    else 
      case compare_numbers(acc.fst, buff.val) as res  
      | LT => 
        let remaining_shield_val = buff.val - acc.fst 
        let remaining_buf = cons(_ shielded(buff.dur, remaining_shield_val), acc.snd)
        pair(__ 0, remaining_buf)

      | EQ => pair(__ 0, acc.snd)
      | GT => 
        let remaining_dmg = acc.fst - buff.val 
        pair(__ remaining_dmg, acc.snd)

  | slowed   => pair(__ acc.fst, cons(_ buff, acc.snd)) 
  | hasted   => pair(__ acc.fst, cons(_ buff, acc.snd)) 
  | silenced => pair(__ acc.fst, cons(_ buff, acc.snd))
  | rooted   => pair(__ acc.fst, cons(_ buff, acc.snd))
  | stuned   => pair(__ acc.fst, cons(_ buff, acc.snd))


handle_shields(hit_dmg: Number, self: Thing) : Thing 
  case self |thing 
  let init_val      = pair(__ hit_dmg, nil(_))
  let res           = fold(__ init_val, use_shields, self.buf) 
  let remaining_dmg = pair_fst(__ res) + self.dmg 
  let remaining_buf = pair_snd(__ res)
  self <= thing(dmg = remaining_dmg, buf = remaining_buf)  


update_buff_dur(self: Thing) : Thing 
  case self |thing 
  let fn = (buff: Buff, acc: List(Buff)) => 
    case buff 
    | shielded => 
      if buff.dur === 0 then 
        acc 
      else cons(_ shielded(buff.dur - 1, buff.val), acc)
    | slowed => 
      if buff.dur === 0 then 
        acc 
      else cons(_ slowed(buff.dur - 1, buff.val), acc)
    | hasted => 
      if buff.dur === 0 then 
        acc 
      else cons(_ hasted(buff.dur - 1, buff.val), acc)
    | silenced => 
      if buff.dur === 0 then 
        acc 
      else cons(_ silenced(buff.dur - 1), acc)
    | rooted => 
      if buff.dur === 0 then 
        acc 
      else cons(_ rooted(buff.dur - 1), acc)
    | stuned => 
      if buff.dur === 0 then 
        acc 
      else cons(_ stuned(buff.dur - 1), acc)

    let new_buf = fold(Buff; List(Buff); [], fn, self.buf)
    self <= thing(buf = new_buf)

POS_X_KEY: Bits 
  01011101b

POS_Y_KEY: Bits 
  01110101b

set_stt_value_v3(self: Thing, v3: V3) : Thing
  case self |thing
  case v3 |v3
  let self = self <= thing(stt=insert(_ POS_X_KEY, v3.x, self.stt))
  let self = self <= thing(stt=insert(_ POS_Y_KEY, v3.y, self.stt))
  // let self = self <= thing(stt=insert(_ POS_Z_KEY, v3.z, self.stt))
  self

get_stt_value_v3(self: Thing) : V3
  case self |thing
  let x = get_stt_value(self, POS_X_KEY)
  let y = get_stt_value(self, POS_Y_KEY)
  // let z = get_stt_value(self, POS_Z_KEY)
  v3(x, y, 0)
